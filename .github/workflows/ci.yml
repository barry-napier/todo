name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/browsers

jobs:
  # Build and test job - runs unit tests and builds the app
  build-and-test:
    name: Build & Unit Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    
    outputs:
      build-cache-key: ${{ steps.cache-build.outputs.cache-hit }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache build output
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            .next
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        timeout-minutes: 5
      
      - name: Run linting
        run: npm run lint
        timeout-minutes: 3
      
      - name: Run type checking
        run: npm run type-check
        timeout-minutes: 3
      
      - name: Run unit tests
        run: npm run test:unit
        timeout-minutes: 10
        env:
          CI: true
      
      - name: Build application
        run: npm run build
        timeout-minutes: 5
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: build-artifacts
          path: |
            .next
            package*.json
          retention-days: 7

  # Install Playwright browsers once for all e2e test jobs
  install-browsers:
    name: Install Browsers
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache Playwright browsers
        id: cache-browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-browsers-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-browsers-
      
      - name: Install dependencies
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit
        timeout-minutes: 5
      
      - name: Install Playwright browsers
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
        timeout-minutes: 8

  # E2E tests matrix - depends on browser installation
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: [build-and-test, install-browsers]
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox  
            project: firefox
          - browser: webkit
            project: webkit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Restore Playwright browsers cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-browsers-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-browsers-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        timeout-minutes: 5
      
      - name: Start application
        run: npm run dev &
        timeout-minutes: 2
        env:
          NODE_ENV: test
          PORT: 3000
      
      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null || curl -f http://localhost:3000 2>/dev/null; do sleep 2; done'
          echo "Application is ready!"
        timeout-minutes: 2
      
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.project }} --reporter=html,json
        timeout-minutes: 15
        env:
          CI: true
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}
          PLAYWRIGHT_JSON_OUTPUT_NAME: test-results-${{ matrix.browser }}.json
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            playwright-report-${{ matrix.browser }}
            test-results-${{ matrix.browser }}.json
            test-results/
          retention-days: 30
      
      - name: Upload failure screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-failures-${{ matrix.browser }}
          path: |
            test-results/**/*.png
            test-results/**/*.webm
          retention-days: 30

  # Mobile E2E tests - only needs Chromium
  e2e-mobile:
    name: E2E Mobile Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: [build-and-test, install-browsers]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Restore Playwright browsers cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-browsers-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-browsers-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        timeout-minutes: 5
      
      - name: Start application
        run: npm run dev &
        timeout-minutes: 2
        env:
          NODE_ENV: test
          PORT: 3000
      
      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null || curl -f http://localhost:3000 2>/dev/null; do sleep 2; done'
          echo "Application is ready!"
        timeout-minutes: 2
      
      - name: Run Mobile E2E tests
        run: npx playwright test --project="Mobile Chrome" --reporter=html,json
        timeout-minutes: 10
        env:
          CI: true
          PLAYWRIGHT_HTML_REPORT: playwright-report-mobile
          PLAYWRIGHT_JSON_OUTPUT_NAME: test-results-mobile.json
      
      - name: Upload mobile test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results-mobile
          path: |
            playwright-report-mobile
            test-results-mobile.json
            test-results/
          retention-days: 30

  # Performance and accessibility tests
  performance-tests:
    name: Performance & A11y Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    needs: [build-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        timeout-minutes: 5
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      
      - name: Start application
        run: npm run dev &
        timeout-minutes: 2
        env:
          NODE_ENV: production
          PORT: 3000
      
      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do sleep 2; done'
          echo "Application is ready!"
        timeout-minutes: 2
      
      - name: Run Lighthouse CI
        run: lhci autorun
        timeout-minutes: 5
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        timeout-minutes: 5
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
        timeout-minutes: 3
        continue-on-error: true
      
      - name: Run dependency check
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_TYPESCRIPT: true
          VALIDATE_JAVASCRIPT: true
          VALIDATE_JSON: true
        timeout-minutes: 5

  # Summary job that depends on all other jobs
  test-summary:
    name: Test Summary
    runs-on: ubuntu-22.04
    needs: [build-and-test, e2e-tests, e2e-mobile, performance-tests, security-scan]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Build and Test: ${{ needs.build-and-test.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Mobile Tests: ${{ needs.e2e-mobile.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
            echo "❌ Build and unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "❌ E2E tests failed"
            exit 1  
          fi
          
          if [[ "${{ needs.e2e-mobile.result }}" != "success" ]]; then
            echo "❌ Mobile E2E tests failed"
            exit 1
          fi
          
          echo "✅ All critical tests passed!"
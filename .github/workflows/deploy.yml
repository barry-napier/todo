name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '18'

jobs:
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        timeout-minutes: 3
      
      - name: Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        timeout-minutes: 10
        env:
          NODE_ENV: production
      
      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"
        timeout-minutes: 5
      
      - name: Run smoke tests on production
        run: |
          echo "Running smoke tests on ${{ steps.deploy.outputs.url }}"
          curl -f "${{ steps.deploy.outputs.url }}/api/health" || exit 1
          echo "âœ… Smoke tests passed!"
        timeout-minutes: 2
      
      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.url }}';
            const success = '${{ job.status }}' === 'success';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id,
              state: success ? 'success' : 'failure',
              environment_url: deploymentUrl,
              description: success ? 'Deployment successful' : 'Deployment failed'
            });

  # Post-deployment E2E tests on production
  production-e2e:
    name: Production E2E Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: deploy
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        timeout-minutes: 5
      
      - name: Install Playwright
        run: npx playwright install chromium
        timeout-minutes: 3
      
      - name: Run production E2E tests
        run: npx playwright test --project=chromium --grep="smoke"
        timeout-minutes: 10
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy.outputs.url }}
          CI: true
      
      - name: Upload production test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: production-test-results
          path: |
            playwright-report
            test-results/
          retention-days: 7